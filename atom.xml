<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[BONFY]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.bonfy.im/"/>
  <updated>2014-09-19T13:24:05.532Z</updated>
  <id>http://blog.bonfy.im/</id>
  
  <author>
    <name><![CDATA[BONFY]]></name>
    <email><![CDATA[foreverbonfy@163.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[微信公众平台Shrimp]]></title>
    <link href="http://blog.bonfy.im/2014/09/17/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0Shrimp/"/>
    <id>http://blog.bonfy.im/2014/09/17/微信公众平台Shrimp/</id>
    <published>2014-09-17T15:30:53.000Z</published>
    <updated>2014-09-17T15:46:22.000Z</updated>
    <content type="html"><![CDATA[<p>微信公众账号：Shrimp 上线 ！！</p>
<p><img src="/images/weixin.jpg" alt=""></p>
<p>主要看了下 微信公众订阅号的功能，以及如何利用flask进行开发</p>
<p>结果：</p>
<p>微信申请好之后，申请开通开发者模式，然后需要提供<br>URL（你自己控制的服务器） ＋ Token（随便填）</p>
<p>微信会发三个参数给你的服务器，加密/校验流程如下：</p>
<ol>
<li>将token、timestamp、nonce三个参数进行字典序排序</li>
<li>将三个参数字符串拼接成一个字符串进行sha1加密</li>
<li>开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</li>
</ol>
<p>都有文档，自己可以用熟悉的语言开发接口并且处理</p>
<p>今天的成果就到这里，有机会再补充<br>别忘了加下微信公众号哦 亲～～</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>微信公众账号：Shrimp 上线 ！！</p>
<p><img src="/images/weixin.jpg" alt=""></p>
<p>主要看了下 微信公众订阅号的功能，以及如何利用flask进行开发</p>
<p>结果：</p>
<p>微信申请好之后，申请开通开发]]>
    </summary>
    
      <category term="weixin" scheme="http://blog.bonfy.im/tags/weixin/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Flask-Restful-lesson2]]></title>
    <link href="http://blog.bonfy.im/2014/09/11/Flask-Restful-lesson2/"/>
    <id>http://blog.bonfy.im/2014/09/11/Flask-Restful-lesson2/</id>
    <published>2014-09-11T13:39:26.000Z</published>
    <updated>2014-09-11T13:52:06.000Z</updated>
    <content type="html"><![CDATA[<p>咱们接着上次的lesson1 接着往下看，首先我们已经利用Flask 创建了 简单的Restful实现<br>接下去，我们将要看到如何加入数据库</p>
<p>Double Kill:</p>
<p>先上代码，view.py:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8  -*-</span></div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Task</div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify,request,abort,make_response</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="comment">######################</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># HTTP Status Handler</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">######################</span></div><div class="line"></div><div class="line"><span class="decorator">@app.errorhandler(404)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span><span class="params">(error)</span>:</span></div><div class="line">    <span class="keyword">return</span> make_response(jsonify( { <span class="string">'error'</span>:<span class="string">'Not Found 404'</span> } ),<span class="number">404</span>)</div><div class="line">    </div><div class="line"><span class="decorator">@app.errorhandler(400)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_400</span><span class="params">(error)</span>:</span></div><div class="line">    <span class="keyword">return</span> make_response(jsonify( { <span class="string">'error'</span>:<span class="string">'Error 400'</span> } ),<span class="number">400</span>)</div><div class="line"></div><div class="line"><span class="comment">######################</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Route And RestFul</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">######################</span></div><div class="line"></div><div class="line"><span class="decorator">@app.route('/')</span></div><div class="line"><span class="decorator">@app.route('/index')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span></div><div class="line">    </div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks', methods = ['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tasks</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment">#tasks = Task.query.get(1)</span></div><div class="line">    <span class="comment">#print tasks</span></div><div class="line">    <span class="comment">#return json.dumps(data1)#,sort_keys=True,indent=4)</span></div><div class="line">    <span class="comment">#return jsonify(tasks.to_json())</span></div><div class="line">    <span class="comment">#只能解决单个的to_json()</span></div><div class="line">    </div><div class="line">    tasks = Task.query.all()</div><div class="line">    <span class="keyword">print</span> tasks</div><div class="line">    <span class="comment">#json_list=[i.serialize for i in qryresult.all()]</span></div><div class="line">    <span class="keyword">return</span> jsonify(json_list = [i.to_json() <span class="keyword">for</span> i <span class="keyword">in</span> tasks])</div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks', methods = ['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_task</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.json <span class="keyword">or</span> <span class="keyword">not</span> <span class="string">'title'</span> <span class="keyword">in</span> request.json:</div><div class="line">        abort(<span class="number">400</span>)</div><div class="line">        </div><div class="line">    task = Task(title = request.json[<span class="string">'title'</span>],description=request.json.get(<span class="string">'description'</span>, <span class="string">""</span>),done=<span class="keyword">False</span>)</div><div class="line">    db.session.add(task)</div><div class="line">    db.session.commit()</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> jsonify(  task = task.to_json() ), <span class="number">201</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks/&lt;int:task_id&gt;', methods = ['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_task</span><span class="params">(task_id)</span>:</span></div><div class="line">    task = Task.query.filter_by(id = task_id).first()</div><div class="line">    <span class="keyword">if</span> task == <span class="keyword">None</span>:</div><div class="line">        abort(<span class="number">404</span>)</div><div class="line">    <span class="keyword">return</span> jsonify(  task = task.to_json()  )</div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks/&lt;int:task_id&gt;', methods = ['PUT'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_task</span><span class="params">(task_id)</span>:</span></div><div class="line">    task = Task.query.filter_by(id = task_id).first()</div><div class="line">    <span class="keyword">if</span> task == <span class="keyword">None</span>:</div><div class="line">        abort(<span class="number">404</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.json:</div><div class="line">        abort(<span class="number">400</span>)</div><div class="line">    <span class="keyword">if</span> <span class="string">'title'</span> <span class="keyword">in</span> request.json <span class="keyword">and</span> type(request.json[<span class="string">'title'</span>]) != unicode:</div><div class="line">        abort(<span class="number">400</span>)</div><div class="line">    <span class="keyword">if</span> <span class="string">'description'</span> <span class="keyword">in</span> request.json <span class="keyword">and</span> type(request.json[<span class="string">'description'</span>]) <span class="keyword">is</span> <span class="keyword">not</span> unicode:</div><div class="line">        abort(<span class="number">400</span>)</div><div class="line">    <span class="keyword">if</span> <span class="string">'done'</span> <span class="keyword">in</span> request.json <span class="keyword">and</span> type(request.json[<span class="string">'done'</span>]) <span class="keyword">is</span> <span class="keyword">not</span> bool:</div><div class="line">        abort(<span class="number">400</span>)</div><div class="line">    task.title = request.json.get(<span class="string">'title'</span>, task.title)</div><div class="line">    task.description = request.json.get(<span class="string">'description'</span>, task.description)</div><div class="line">    task.done = request.json.get(<span class="string">'done'</span>, task.done)</div><div class="line">    </div><div class="line">    db.session.flush()</div><div class="line">    db.session.commit()</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> jsonify( task = task.to_json() )</div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks/&lt;int:task_id&gt;', methods = ['DELETE'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_task</span><span class="params">(task_id)</span>:</span></div><div class="line">    task = Task.query.filter_by(id = task_id).first()</div><div class="line">    <span class="keyword">if</span> task == <span class="keyword">None</span>:</div><div class="line">        abort(<span class="number">404</span>)</div><div class="line">    db.session.delete(task)</div><div class="line">    db.session.commit()</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> jsonify( { <span class="string">'result'</span>: <span class="keyword">True</span> } )</div></pre></td></tr></table></figure>

<p><a id="more"></a><br>models.py：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8  -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</div><div class="line"></div><div class="line">ROLE_USER = <span class="number">0</span></div><div class="line">ROLE_ADMIN = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></div><div class="line">    id = db.Column(db.Integer, primary_key = <span class="keyword">True</span>)</div><div class="line">    nickname = db.Column(db.String(<span class="number">64</span>), index = <span class="keyword">True</span>, unique = <span class="keyword">True</span>)</div><div class="line">    email = db.Column(db.String(<span class="number">120</span>), index = <span class="keyword">True</span>, unique = <span class="keyword">True</span>)</div><div class="line">    role = db.Column(db.SmallInteger, default = ROLE_USER)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;User %r&gt;'</span> % (self.nickname)</div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span><span class="params">(db.Model)</span>:</span></div><div class="line">    id = db.Column(db.Integer, primary_key = <span class="keyword">True</span>)</div><div class="line">    title = db.Column(db.String(<span class="number">50</span>))</div><div class="line">    description = db.Column(db.String(<span class="number">120</span>))</div><div class="line">    done = db.Column(db.Boolean,default= <span class="keyword">False</span>)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'&lt;Task %r&gt;'</span> % (self.title)</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_json</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> {</div><div class="line">            <span class="string">'id'</span>: self.id,</div><div class="line">            <span class="string">'title'</span>: self.title,</div><div class="line">            <span class="string">'description'</span>: self.description,</div><div class="line">            <span class="string">'done'</span>:self.done</div><div class="line">        }</div></pre></td></tr></table></figure>

<p>这里就是利用Sqlalchemy链接数据库，Python的ORM，大家可以去了解下，我其实也不太了解，反正这样子就实现了与数据库的链接</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>咱们接着上次的lesson1 接着往下看，首先我们已经利用Flask 创建了 简单的Restful实现<br>接下去，我们将要看到如何加入数据库</p>
<p>Double Kill:</p>
<p>先上代码，view.py:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8  -*-</span></div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Task</div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify,request,abort,make_response</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="comment">######################</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># HTTP Status Handler</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">######################</span></div><div class="line"></div><div class="line"><span class="decorator">@app.errorhandler(404)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span><span class="params">(error)</span>:</span></div><div class="line">    <span class="keyword">return</span> make_response(jsonify( { <span class="string">'error'</span>:<span class="string">'Not Found 404'</span> } ),<span class="number">404</span>)</div><div class="line">    </div><div class="line"><span class="decorator">@app.errorhandler(400)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_400</span><span class="params">(error)</span>:</span></div><div class="line">    <span class="keyword">return</span> make_response(jsonify( { <span class="string">'error'</span>:<span class="string">'Error 400'</span> } ),<span class="number">400</span>)</div><div class="line"></div><div class="line"><span class="comment">######################</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Route And RestFul</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">######################</span></div><div class="line"></div><div class="line"><span class="decorator">@app.route('/')</span></div><div class="line"><span class="decorator">@app.route('/index')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span></div><div class="line">    </div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks', methods = ['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tasks</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment">#tasks = Task.query.get(1)</span></div><div class="line">    <span class="comment">#print tasks</span></div><div class="line">    <span class="comment">#return json.dumps(data1)#,sort_keys=True,indent=4)</span></div><div class="line">    <span class="comment">#return jsonify(tasks.to_json())</span></div><div class="line">    <span class="comment">#只能解决单个的to_json()</span></div><div class="line">    </div><div class="line">    tasks = Task.query.all()</div><div class="line">    <span class="keyword">print</span> tasks</div><div class="line">    <span class="comment">#json_list=[i.serialize for i in qryresult.all()]</span></div><div class="line">    <span class="keyword">return</span> jsonify(json_list = [i.to_json() <span class="keyword">for</span> i <span class="keyword">in</span> tasks])</div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks', methods = ['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_task</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.json <span class="keyword">or</span> <span class="keyword">not</span> <span class="string">'title'</span> <span class="keyword">in</span> request.json:</div><div class="line">        abort(<span class="number">400</span>)</div><div class="line">        </div><div class="line">    task = Task(title = request.json[<span class="string">'title'</span>],description=request.json.get(<span class="string">'description'</span>, <span class="string">""</span>),done=<span class="keyword">False</span>)</div><div class="line">    db.session.add(task)</div><div class="line">    db.session.commit()</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> jsonify(  task = task.to_json() ), <span class="number">201</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks/&lt;int:task_id&gt;', methods = ['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_task</span><span class="params">(task_id)</span>:</span></div><div class="line">    task = Task.query.filter_by(id = task_id).first()</div><div class="line">    <span class="keyword">if</span> task == <span class="keyword">None</span>:</div><div class="line">        abort(<span class="number">404</span>)</div><div class="line">    <span class="keyword">return</span> jsonify(  task = task.to_json()  )</div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks/&lt;int:task_id&gt;', methods = ['PUT'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_task</span><span class="params">(task_id)</span>:</span></div><div class="line">    task = Task.query.filter_by(id = task_id).first()</div><div class="line">    <span class="keyword">if</span> task == <span class="keyword">None</span>:</div><div class="line">        abort(<span class="number">404</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.json:</div><div class="line">        abort(<span class="number">400</span>)</div><div class="line">    <span class="keyword">if</span> <span class="string">'title'</span> <span class="keyword">in</span> request.json <span class="keyword">and</span> type(request.json[<span class="string">'title'</span>]) != unicode:</div><div class="line">        abort(<span class="number">400</span>)</div><div class="line">    <span class="keyword">if</span> <span class="string">'description'</span> <span class="keyword">in</span> request.json <span class="keyword">and</span> type(request.json[<span class="string">'description'</span>]) <span class="keyword">is</span> <span class="keyword">not</span> unicode:</div><div class="line">        abort(<span class="number">400</span>)</div><div class="line">    <span class="keyword">if</span> <span class="string">'done'</span> <span class="keyword">in</span> request.json <span class="keyword">and</span> type(request.json[<span class="string">'done'</span>]) <span class="keyword">is</span> <span class="keyword">not</span> bool:</div><div class="line">        abort(<span class="number">400</span>)</div><div class="line">    task.title = request.json.get(<span class="string">'title'</span>, task.title)</div><div class="line">    task.description = request.json.get(<span class="string">'description'</span>, task.description)</div><div class="line">    task.done = request.json.get(<span class="string">'done'</span>, task.done)</div><div class="line">    </div><div class="line">    db.session.flush()</div><div class="line">    db.session.commit()</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> jsonify( task = task.to_json() )</div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks/&lt;int:task_id&gt;', methods = ['DELETE'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_task</span><span class="params">(task_id)</span>:</span></div><div class="line">    task = Task.query.filter_by(id = task_id).first()</div><div class="line">    <span class="keyword">if</span> task == <span class="keyword">None</span>:</div><div class="line">        abort(<span class="number">404</span>)</div><div class="line">    db.session.delete(task)</div><div class="line">    db.session.commit()</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> jsonify( { <span class="string">'result'</span>: <span class="keyword">True</span> } )</div></pre></td></tr></table></figure>

<p>]]>
    
    </summary>
    
      <category term="Flask-Rest" scheme="http://blog.bonfy.im/tags/Flask-Rest/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Flask-Restful-lesson1]]></title>
    <link href="http://blog.bonfy.im/2014/09/11/Flask-Restful-lesson1/"/>
    <id>http://blog.bonfy.im/2014/09/11/Flask-Restful-lesson1/</id>
    <published>2014-09-11T13:18:44.000Z</published>
    <updated>2014-09-11T13:35:18.000Z</updated>
    <content type="html"><![CDATA[<p>仅以此文纪念我的Flask-Restful学习之路<br>先在开头介绍一下大神 <a href="http://blog.miguelgrinberg.com/" target="_blank" rel="external">Miguelgrinberg</a> 本文大部分借鉴了他的Restful文章</p>
<p>First Blood：</p>
<p>先上代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># *-* coding:utf-8 *-*</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, flash, redirect, session, url_for, request, g</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> abort</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line">tasks = [</div><div class="line">    {</div><div class="line">        <span class="string">'id'</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">u'Buy groceries'</span>,</div><div class="line">        <span class="string">'description'</span>: <span class="string">u'Milk, Cheese, Pizza, Fruit, Tylenol'</span>, </div><div class="line">        <span class="string">'done'</span>: <span class="keyword">False</span></div><div class="line">    },</div><div class="line">    {</div><div class="line">        <span class="string">'id'</span>: <span class="number">2</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">u'Learn Python'</span>,</div><div class="line">        <span class="string">'description'</span>: <span class="string">u'Need to find a good Python tutorial on the web'</span>, </div><div class="line">        <span class="string">'done'</span>: <span class="keyword">False</span></div><div class="line">    }</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment">######################</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Personal function</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">######################</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTaskByID</span><span class="params">(task_id,tasks)</span>:</span></div><div class="line">	<span class="keyword">for</span> task <span class="keyword">in</span> tasks:</div><div class="line">		<span class="keyword">print</span> task</div><div class="line">		<span class="keyword">if</span> task[<span class="string">'id'</span>] == task_id:</div><div class="line">			<span class="keyword">return</span> task</div><div class="line">	<span class="keyword">return</span> <span class="keyword">None</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">######################</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># HTTP Status Handler</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">######################</span></div><div class="line"></div><div class="line"><span class="decorator">@app.errorhandler(404)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span><span class="params">(error)</span>:</span></div><div class="line">	<span class="keyword">return</span> make_response(jsonify( { <span class="string">'error'</span>:<span class="string">'Not Found 404'</span> } ),<span class="number">404</span>)</div><div class="line">	</div><div class="line"><span class="decorator">@app.errorhandler(400)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_400</span><span class="params">(error)</span>:</span></div><div class="line">    <span class="keyword">return</span> make_response(jsonify( { <span class="string">'error'</span>:<span class="string">'Error 400'</span> } ),<span class="number">400</span>)</div><div class="line"></div><div class="line"><span class="comment">######################</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Route And RestFul</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">######################</span></div><div class="line"></div><div class="line"><span class="decorator">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks', methods = ['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tasks</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> jsonify( { <span class="string">'tasks'</span>: tasks } )</div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks', methods = ['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_task</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.json <span class="keyword">or</span> <span class="keyword">not</span> <span class="string">'title'</span> <span class="keyword">in</span> request.json:</div><div class="line">        abort(<span class="number">400</span>)</div><div class="line">    task = {</div><div class="line">        <span class="string">'id'</span>: tasks[-<span class="number">1</span>][<span class="string">'id'</span>] + <span class="number">1</span>,</div><div class="line">        <span class="string">'title'</span>: request.json[<span class="string">'title'</span>],</div><div class="line">        <span class="string">'description'</span>: request.json.get(<span class="string">'description'</span>, <span class="string">""</span>),</div><div class="line">        <span class="string">'done'</span>: <span class="keyword">False</span></div><div class="line">    }</div><div class="line">    tasks.append(task)</div><div class="line">    <span class="keyword">return</span> jsonify( { <span class="string">'task'</span>: task } ), <span class="number">201</span></div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks/&lt;int:task_id&gt;', methods = ['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_task</span><span class="params">(task_id)</span>:</span></div><div class="line">    task = getTaskByID(task_id,tasks)</div><div class="line">    <span class="keyword">if</span> task == <span class="keyword">None</span>:</div><div class="line">        abort(<span class="number">404</span>)</div><div class="line">    <span class="keyword">return</span> jsonify( { <span class="string">'task'</span>: task } )</div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks/&lt;int:task_id&gt;', methods = ['DELETE'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_task</span><span class="params">(task_id)</span>:</span></div><div class="line">    task = getTaskByID(task_id, tasks)</div><div class="line">    <span class="keyword">if</span> task == <span class="keyword">None</span>:</div><div class="line">        abort(<span class="number">404</span>)</div><div class="line">    tasks.remove(task)</div><div class="line">    <span class="keyword">return</span> jsonify( { <span class="string">'result'</span>: <span class="keyword">True</span> } )</div></pre></td></tr></table></figure>

<p><a id="more"></a><br>这里看过大神文章的朋友都知道，这是他的不用　Flask-Restful API写的 Restful实现<br>这里主要就是将他的lamda 实现，用函数 get_task() 替代了 ，其他应该没什么差别<br>大家可以借鉴大神的blog，当然不用lamda只是本人的一种坚持，不知道在哪里看到的，flask对lamda支持不太行。。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>仅以此文纪念我的Flask-Restful学习之路<br>先在开头介绍一下大神 <a href="http://blog.miguelgrinberg.com/" target="_blank" rel="external">Miguelgrinberg</a> 本文大部分借鉴了他的Restful文章</p>
<p>First Blood：</p>
<p>先上代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># *-* coding:utf-8 *-*</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, flash, redirect, session, url_for, request, g</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> abort</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</div><div class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line">tasks = [</div><div class="line">    {</div><div class="line">        <span class="string">'id'</span>: <span class="number">1</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">u'Buy groceries'</span>,</div><div class="line">        <span class="string">'description'</span>: <span class="string">u'Milk, Cheese, Pizza, Fruit, Tylenol'</span>, </div><div class="line">        <span class="string">'done'</span>: <span class="keyword">False</span></div><div class="line">    },</div><div class="line">    {</div><div class="line">        <span class="string">'id'</span>: <span class="number">2</span>,</div><div class="line">        <span class="string">'title'</span>: <span class="string">u'Learn Python'</span>,</div><div class="line">        <span class="string">'description'</span>: <span class="string">u'Need to find a good Python tutorial on the web'</span>, </div><div class="line">        <span class="string">'done'</span>: <span class="keyword">False</span></div><div class="line">    }</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment">######################</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Personal function</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">######################</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTaskByID</span><span class="params">(task_id,tasks)</span>:</span></div><div class="line">	<span class="keyword">for</span> task <span class="keyword">in</span> tasks:</div><div class="line">		<span class="keyword">print</span> task</div><div class="line">		<span class="keyword">if</span> task[<span class="string">'id'</span>] == task_id:</div><div class="line">			<span class="keyword">return</span> task</div><div class="line">	<span class="keyword">return</span> <span class="keyword">None</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">######################</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># HTTP Status Handler</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">######################</span></div><div class="line"></div><div class="line"><span class="decorator">@app.errorhandler(404)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span><span class="params">(error)</span>:</span></div><div class="line">	<span class="keyword">return</span> make_response(jsonify( { <span class="string">'error'</span>:<span class="string">'Not Found 404'</span> } ),<span class="number">404</span>)</div><div class="line">	</div><div class="line"><span class="decorator">@app.errorhandler(400)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_400</span><span class="params">(error)</span>:</span></div><div class="line">    <span class="keyword">return</span> make_response(jsonify( { <span class="string">'error'</span>:<span class="string">'Error 400'</span> } ),<span class="number">400</span>)</div><div class="line"></div><div class="line"><span class="comment">######################</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Route And RestFul</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">######################</span></div><div class="line"></div><div class="line"><span class="decorator">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks', methods = ['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tasks</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> jsonify( { <span class="string">'tasks'</span>: tasks } )</div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks', methods = ['POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_task</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.json <span class="keyword">or</span> <span class="keyword">not</span> <span class="string">'title'</span> <span class="keyword">in</span> request.json:</div><div class="line">        abort(<span class="number">400</span>)</div><div class="line">    task = {</div><div class="line">        <span class="string">'id'</span>: tasks[-<span class="number">1</span>][<span class="string">'id'</span>] + <span class="number">1</span>,</div><div class="line">        <span class="string">'title'</span>: request.json[<span class="string">'title'</span>],</div><div class="line">        <span class="string">'description'</span>: request.json.get(<span class="string">'description'</span>, <span class="string">""</span>),</div><div class="line">        <span class="string">'done'</span>: <span class="keyword">False</span></div><div class="line">    }</div><div class="line">    tasks.append(task)</div><div class="line">    <span class="keyword">return</span> jsonify( { <span class="string">'task'</span>: task } ), <span class="number">201</span></div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks/&lt;int:task_id&gt;', methods = ['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_task</span><span class="params">(task_id)</span>:</span></div><div class="line">    task = getTaskByID(task_id,tasks)</div><div class="line">    <span class="keyword">if</span> task == <span class="keyword">None</span>:</div><div class="line">        abort(<span class="number">404</span>)</div><div class="line">    <span class="keyword">return</span> jsonify( { <span class="string">'task'</span>: task } )</div><div class="line"></div><div class="line"><span class="decorator">@app.route('/todo/api/v1.0/tasks/&lt;int:task_id&gt;', methods = ['DELETE'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_task</span><span class="params">(task_id)</span>:</span></div><div class="line">    task = getTaskByID(task_id, tasks)</div><div class="line">    <span class="keyword">if</span> task == <span class="keyword">None</span>:</div><div class="line">        abort(<span class="number">404</span>)</div><div class="line">    tasks.remove(task)</div><div class="line">    <span class="keyword">return</span> jsonify( { <span class="string">'result'</span>: <span class="keyword">True</span> } )</div></pre></td></tr></table></figure>

<p>]]>
    
    </summary>
    
      <category term="Flask-Rest" scheme="http://blog.bonfy.im/tags/Flask-Rest/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Protractor]]></title>
    <link href="http://blog.bonfy.im/2014/09/07/Protractor/"/>
    <id>http://blog.bonfy.im/2014/09/07/Protractor/</id>
    <published>2014-09-07T08:15:45.000Z</published>
    <updated>2014-09-07T08:23:42.000Z</updated>
    <content type="html"><![CDATA[<p> Protractor 是  end-to-end testing 的一个工具，比如测试 AngularJs的APP<br> 但是在Mac 下面怎么都安装不上，不清楚到底是什么问题</p>
<p> 手动下载 chromedriver 存放于 protractor/selenium/ </p>
<p> 暂时解决</p>
<p> 另外 </p>
<p> 一定要先 npm start<br> 然后在另一个窗口 npm run protractor</p>
]]></content>
    <summary type="html">
    <![CDATA[<p> Protractor 是  end-to-end testing 的一个工具，比如测试 AngularJs的APP<br> 但是在Mac 下面怎么都安装不上，不清楚到底是什么问题</p>
<p> 手动下载 chromedriver 存放于 protractor/selen]]>
    </summary>
    
      <category term="Node" scheme="http://blog.bonfy.im/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[flask与Angularjs共用]]></title>
    <link href="http://blog.bonfy.im/2014/09/02/flask%E4%B8%8EAngularjs%E5%85%B1%E7%94%A8/"/>
    <id>http://blog.bonfy.im/2014/09/02/flask与Angularjs共用/</id>
    <published>2014-09-02T11:55:34.000Z</published>
    <updated>2014-09-02T11:56:24.000Z</updated>
    <content type="html"><![CDATA[<p>解决办法 1：<br>替换 AngularJS 中使用的标识符</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app = angular.module('TheApp', [], ($interpolateProvider) -&gt;</div><div class="line">  $interpolateProvider.startSymbol('{$')</div><div class="line">  $interpolateProvider.endSymbol('$}')</div><div class="line">)</div></pre></td></tr></table></figure>

<p>cmd<br>解决办法 2（推荐）：<br>替换 Jinja2 中使用的标识符（在 Flask 下）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.jinja_env.variable_start_string = <span class="string">'${'</span></div><div class="line">app.jinja_env.variable_end_string = <span class="string">'}'</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>解决办法 1：<br>替换 AngularJS 中使用的标识符</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class=]]>
    </summary>
    
      <category term="Angularjs" scheme="http://blog.bonfy.im/tags/Angularjs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://blog.bonfy.im/2014/09/02/hello-world/"/>
    <id>http://blog.bonfy.im/2014/09/02/hello-world/</id>
    <published>2014-09-02T11:52:32.000Z</published>
    <updated>2014-09-02T11:52:32.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">trobuleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2>
<h3 id="Create_a_new_post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[加油加油]]></title>
    <link href="http://blog.bonfy.im/2014/09/01/%E5%8A%A0%E6%B2%B9%E5%8A%A0%E6%B2%B9/"/>
    <id>http://blog.bonfy.im/2014/09/01/加油加油/</id>
    <published>2014-09-01T14:12:19.000Z</published>
    <updated>2014-09-01T14:15:18.000Z</updated>
    <content type="html"><![CDATA[<p>有卖萌之嫌<br>但还是鼓励一下自己，比较健忘，所以顺便也算再熟悉一下发文</p>
<p>加油加油！ o0(n_n))o</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有卖萌之嫌<br>但还是鼓励一下自己，比较健忘，所以顺便也算再熟悉一下发文</p>
<p>加油加油！ o0(n_n))o</p>
]]>
    </summary>
    
      <category term="闲话" scheme="http://blog.bonfy.im/tags/%E9%97%B2%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重拾Hexo]]></title>
    <link href="http://blog.bonfy.im/2014/08/30/%E9%87%8D%E6%8B%BEHexo/"/>
    <id>http://blog.bonfy.im/2014/08/30/重拾Hexo/</id>
    <published>2014-08-30T05:25:21.000Z</published>
    <updated>2014-08-30T08:14:01.000Z</updated>
    <content type="html"><![CDATA[<p>当中有好长一段时间没有更新了，久到Hexo都已经更新了，然后发现以前的设置好像也不管用了，没办法重新再搞一遍吧。<br>貌似目录结构都有些不一样了，不过一切都过去了，现在应该可以了</p>
<p>不过整个下午也发现了一个Hexo的BUG，估计跟 themes有关，整了好久，由于Hexo的默认主题：landscape 是用Google字体的，大家都懂的，对于天朝的用户这是可望不可及的，加载不到导致整个页面的渲染都变慢了。以前都是在生成的public文件夹下 直接改index.html的，但是每次生成都会被覆盖，所以想整个一劳永逸的办法。<br>寻找官方的themes，发现有中国用户做了个大陆版的landscape：名曰landscape－plus；主要有两个要吐槽的点，一个是link字体是红色，太吓人，另外是 加了个友联，都是广告。。。<br>想想还是自己改theme吧。。。结果自己在landscape里面如何改，字体都是红色了。。。</p>
<p>最后解决方法，重新 hexo init生成新的文件夹，然后将以前的文章copy进post，重新生成<br>然后再在 themes/landscape/layout/_partial/header.ejs 中将</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link href="//fonts.googleapis.com/css?family=Source+Code+Pro" rel="stylesheet" type="text/css"&gt;</div></pre></td></tr></table></figure>

<p>这句话给注释</p>
<p>太折腾人了，今天就到此为止，无力为继</p>
<p>To be continued</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>当中有好长一段时间没有更新了，久到Hexo都已经更新了，然后发现以前的设置好像也不管用了，没办法重新再搞一遍吧。<br>貌似目录结构都有些不一样了，不过一切都过去了，现在应该可以了</p>
<p>不过整个下午也发现了一个Hexo的BUG，估计跟 themes有关，整了好久，]]>
    </summary>
    
      <category term="blog" scheme="http://blog.bonfy.im/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[blog同步]]></title>
    <link href="http://blog.bonfy.im/2014/01/05/blog%E5%90%8C%E6%AD%A5/"/>
    <id>http://blog.bonfy.im/2014/01/05/blog同步/</id>
    <published>2014-01-05T06:40:35.000Z</published>
    <updated>2014-08-28T15:38:49.000Z</updated>
    <content type="html"><![CDATA[<p>blog建立的初衷是 你经常有很多东西去google或者baidu，当然一般你查到了你想要的东西你一般都会直接将这个网页设置为书签，但是这个还是会有两个问题：</p>
<ol>
<li>书签多了之后，如何管理？我就发现很多我以前找到过的有用的文章或者知识点，后来想起就很难再找到了</li>
<li>书签往往保存的是一个网站路径，这个网页可能谈的事情多种多样，并不是都是你感兴趣的，你想要的。你查的可能是里面的一个命令，或者一个问题的解决方案，我每次不用将这篇文章从头看到底</li>
</ol>
<p>说到底还是我的记忆总是那种片段性记忆，只记得某个时间点干过些啥，但是具体怎么操作的可能并不是会记得很清楚，所以这个Blog的初衷可能为了方便记忆，和存放一些自己感兴趣的东西</p>
<p>let’s go ahead：<br>如果我的电脑就一个，那么我建blog之类的只在一个文件夹内修改，那么我也就没其他问题了，可是我可能家里一个工作电脑，单位一个，那么万一我要记录的时候就有问题了，我必须保证两边是同步的，当然一个好方法 就是github保存。</p>
<p>当然我现在用的是 hexo,它可以自动deploy到 github.io，但是这里面都是编译的文件，而且我还没找到方法增量添加</p>
<p>所以我这里的解决方案是我还得再见一个repo，存放原始文件，这样我每次修改，保存到github，修改的时候可以先clone，然后再上传。这只能是目前我能想到的解决办法了。</p>
<p>Let’s go ahead：</p>
<p>先访问github.com 创建一个repo： xxx<br>接下去：</p>
<figure class="highlight git"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">touch README.md(windows下没有touch)</div><div class="line">git init</div><div class="line">git <span class="built_in">add</span> README.md</div><div class="line">git commit -<span class="keyword">m</span> <span class="string">"first commit"</span></div><div class="line">git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//github.<span class="keyword">com</span>/username/xxx.git</div><div class="line">git push -<span class="keyword">u</span> origin master</div></pre></td></tr></table></figure>

<p>先在一台PC上建立xxx，完成代码</p>
<figure class="highlight git"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span>.</div><div class="line">git commit -m <span class="string">"xxxxxx"</span></div><div class="line">git <span class="keyword">push</span></div></pre></td></tr></table></figure>

<p>另一台PC上直接</p>
<figure class="highlight git"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/useranem/xxx.git</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>blog建立的初衷是 你经常有很多东西去google或者baidu，当然一般你查到了你想要的东西你一般都会直接将这个网页设置为书签，但是这个还是会有两个问题：</p>
<ol>
<li>书签多了之后，如何管理？我就发现很多我以前找到过的有用的文章或者知识点，后来想起就很难再]]>
    </summary>
    
      <category term="blog" scheme="http://blog.bonfy.im/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一些常识]]></title>
    <link href="http://blog.bonfy.im/2014/01/01/%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%AF%86/"/>
    <id>http://blog.bonfy.im/2014/01/01/一些常识/</id>
    <published>2014-01-01T07:16:03.000Z</published>
    <updated>2014-08-28T15:38:49.000Z</updated>
    <content type="html"><![CDATA[<p>写这个的目的主要是为了不要再在这么多网站中奔来跑去浪费时间</p>
<p>如果windows下运行 jekyll 有UTF-8中文问题 请输入命令：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chcp <span class="number">65001</span></div></pre></td></tr></table></figure>

<p>在windows下安装 jekyll 可能会报错，原因见 <a href="http://www.cnblogs.com/yevon/p/3310857.html" target="_blank" rel="external">叶子的博客</a><br>这里长话短说： pygmens.rb 版本太高需要降低</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gem install pygments.rb --version <span class="string">"=0.5.0"</span></div><div class="line">gem uninstall pygments.rb --version <span class="string">"=0.5.2"</span> (视你的版本号而定)</div></pre></td></tr></table></figure>

<p>关于github push代码</p>
<figure class="highlight git"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">add</span> .</div><div class="line">git commit -<span class="keyword">am</span> <span class="string">"message"</span></div><div class="line">git push</div></pre></td></tr></table></figure>

<p>这里说说我的blog</p>
<p>打算在github上部署自己的blog，然后域名重定向<br>github官网推荐jekyll，我一开始也是那么干的<br>后来看到大家推荐 Hexo，也算尝试了一把，的确还是比较容易上手的</p>
<p>研究不深，还望谅解（见<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">ibruce的blog</a>,这个写的比较深入)<br>当然hexo 部署是非常简单的，配置好_config.yml<br>Hexo deploy就行</p>
<p>目前比较纠结：deploy会盖掉CNAME，每次自己建太麻烦，就没有增量部署么？</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>写这个的目的主要是为了不要再在这么多网站中奔来跑去浪费时间</p>
<p>如果windows下运行 jekyll 有UTF-8中文问题 请输入命令：</p>
<figure class="highlight cmd"><table><tr><td class="gutter]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[写在2014.1.1]]></title>
    <link href="http://blog.bonfy.im/2014/01/01/%E5%86%99%E5%9C%A8201411/"/>
    <id>http://blog.bonfy.im/2014/01/01/写在201411/</id>
    <published>2014-01-01T06:36:03.000Z</published>
    <updated>2014-08-28T15:38:49.000Z</updated>
    <content type="html"><![CDATA[<p>写在2014年.1.1</p>
<p>预祝在新的一年中我能坚持下去</p>
<p>加油！！！~~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>写在2014年.1.1</p>
<p>预祝在新的一年中我能坚持下去</p>
<p>加油！！！~~~</p>
]]>
    </summary>
    
  </entry>
  
</feed>
